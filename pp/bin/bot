#!/usr/bin/env php
<?php
//error_reporting(0);

process(is_array($argv) ? $argv : []);

function botRun()
{
	if (defined('STDIN')) {
		if (isset($argv[1])) {
			switch ($argv[1]) {
				case 'install-web':
					file_put_contents('run', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/run'));
					file_put_contents('content.php', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/content.php'));
					file_put_contents('func.php', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/func.php'));
					file_put_contents('index.php', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/index.php'));
					echo Console::warna("Webserver initialized\n", 'green');
					exit;
					break;
				case 'help':
					botHelp();
					exit;
					break;
				case 'update':
					file_put_contents(__DIR__ . '/' . basename(__FILE__), file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/bot'));
					echo Console::warna("Updated successfully\n", 'green');
					break;
			}
		}
		welcome();
		echo 'berapa kali: ';
		$loop = trim(fgets('STDIN'));
		if (!is_numeric($loop)) {
			die(Console::warna("Harus nomor, serah lu lah\n", 'red'));
		}
		$cookie = getCookie('cookie.txt');
		$csrf = getCsrf('csrf.txt');
		if (!file_exists('ua.txt')) {
			file_put_contents('ua.txt', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36');
		}
		$ua = file_get_contents('ua.txt');
		$twd2usd = $loop;
		for ($x = 0; $x < $loop; ++$x) {
			$usd_to_twd = usd_to_twd($cookie, $csrf);
			$out = json_encode($usd_to_twd);
			$amount = getStr($out, '"value":"', '"');
			if (true == strpos($out, 'null')) {
				$text3 = "Success convert 0.02 USD  to $amount TWD";
				echo Console::warna(date('d-m-Y H:i:s ') . $text3 . "\n", 'green');
			} else {
				$text4 = 'Failed Convert USD2TWD';
				echo Console::warna(date('d-m-Y H:i:s ') . $text4 . "\n", 'red');
				--$twd2usd;
			}
			sleep(1);
			if ($x == $loop - 1) {
				$twd_to_usd = twd_to_usd($cookie, $csrf, $twd2usd);
				$out = json_encode($twd_to_usd);
				$amount = getStr($out, '"value":"', '"');
				if (true == strpos($out, 'null')) {
					$text3 = Console::warna("Success convert $loop TWD  to $amount USD", 'green');
					echo date('d-m-Y H:i:s ') . $text3 . "\n";
				} else {
					$text4 = 'Failed Convert USD2TWD';
					echo Console::warna(date('d-m-Y H:i:s ') . $text4 . "\n", 'red');
				}
			}
		}
	}
}

function botHelp()
{
	echo '
Script : ' . realpath(__DIR__ . '/' . basename(__FILE__)) . '
Update : ' . Console::warna(basename(__FILE__) . ' update', 'green') . '
Install Webserver : ' . Console::warna(basename(__FILE__) . ' install-web', 'green') . '
	' . "\n\n";
}

function getStr($string, $start, $end)
{
	$str = explode($start, $string);
	$str = explode($end, ($str[1]));

	return $str[0];
}

function twd_to_usd($cookie, $csrf, $am)
{
	global $ua;
	if (!$am) {
		die(Console::warna('amount TWD2USD is zero', 'red'));
	}
	$arr = ["\r", '	'];
	$url = 'https://www.paypal.com/myaccount/money/api/currencies/transfer';
	$h = explode("\n", str_replace($arr, '', "Cookie: $cookie
	Content-Type: application/json
	user-agent: $ua"));
	$body = "{\"sourceCurrency\":\"TWD\",\"sourceAmount\":$am,\"targetCurrency\":\"USD\",\"_csrf\":\"$csrf\"}";
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $h);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$x = curl_exec($ch);
	curl_close($ch);

	return json_decode($x, true);
}
function usd_to_twd($cookie, $csrf)
{
	global $ua;
	$arr = ["\r", '	'];
	$url = 'https://www.paypal.com/myaccount/money/api/currencies/transfer';
	$h = explode("\n", str_replace($arr, '', "Cookie: $cookie
	Content-Type: application/json
	user-agent: $ua"));
	$body = "{\"sourceCurrency\":\"USD\",\"sourceAmount\":0.02,\"targetCurrency\":\"TWD\",\"_csrf\":\"$csrf\"}";
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $h);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$x = curl_exec($ch);
	curl_close($ch);

	return json_decode($x, true);
}

function getCookie($file)
{
	if (!file_exists($file)) {
		file_put_contents($file, '');
		exit($file . ' not found');
	}
	$cookieStr = file_get_contents($file);
	if ($cookieStr && !empty($cookieStr) && countLine($file) > 1) {
		$cookieStre = explode("\n", $cookieStr);
		$cookieStrr = '';
		foreach ($cookieStre as $line) {
			$rgx = '/Set\-Cookie\:\s/m';
			$x = preg_replace($rgx, '', $line);
			$x = preg_replace('/\n+/m', ";\s", $x);
			$x = str_replace("\n", '', $x);
			$x = str_replace("\r", '', $x);
			$x = str_replace(PHP_EOL, '', $x);
			$x = str_replace('
				', '', $x);
			$x = preg_replace('/\s+/', ' ', $x);
			$x .= '; ';
			$cookieStrr .= trim($x) . ' ';
		}
		$cookieStrr = preg_replace('/\;{2,10}|\;(\s|\s+)\;/m', ';', $cookieStrr);
		$cookieStrr = str_replace(['; ;', '; ;'], ';', $cookieStrr);
		file_put_contents($file, $cookieStrr);
		$cookieStr = $cookieStrr;
	}

	return $cookieStr;
}

function countLine($file)
{
	$linecount = 0;
	$handle = fopen($file, 'r');
	while (!feof($handle)) {
		$line = fgets($handle);
		++$linecount;
	}

	fclose($handle);

	return $linecount;
}

function getCsrf($file)
{
	if (!file_exists($file)) {
		file_put_contents($file, '');
		exit($file . ' not found');
	}
	$str = file_get_contents($file);
	if (isJson($str)) {
		$j = (array) json_decode($str);
		$str = isset($j['_csrf']) ? $j['_csrf'] : die(Console::warna('CSRF invalid JSON format', 'red'));
		file_put_contents($file, $str);
	}

	return $str;
}

function isJson($string)
{
	json_decode($string);

	return JSON_ERROR_NONE == json_last_error();
}

function welcome()
{
	Console::welcome();
}

/**
 * PHP Colored CLI
 * Used to log strings with custom colors to console using php.
 *
 * Copyright (C) 2013 Sallar Kaboli <sallar.kaboli@gmail.com>
 * MIT Lincesed
 * http://opensource.org/licenses/MIT
 *
 * Original colored CLI output script:
 * (C) Jesse Donat https://github.com/donatj
 */
class Console
{
	public static $foreground_colors = [
		'bold' => '1',    'dim' => '2',
		'black' => '0;30', 'dark_gray' => '1;30',
		'blue' => '0;34', 'light_blue' => '1;34',
		'green' => '0;32', 'light_green' => '1;32',
		'cyan' => '0;36', 'light_cyan' => '1;36',
		'red' => '0;31', 'light_red' => '1;31',
		'purple' => '0;35', 'light_purple' => '1;35',
		'brown' => '0;33', 'yellow' => '1;33',
		'light_gray' => '0;37', 'white' => '1;37',
		'normal' => '0;39',
	];

	public static $background_colors = [
		'black' => '40',   'red' => '41',
		'green' => '42',   'yellow' => '43',
		'blue' => '44',   'magenta' => '45',
		'cyan' => '46',   'light_gray' => '47',
	];

	public static $win;

	public static $win_color = [
		'black' => '0', 'green' => '10',
		'red' => '12', 'white' => '15',
		'pink' => '13', 'cyan' => '11',
		'grey' => '8', 'lightgrey' => '7',
		'yellow' => '14', 'blue' => '9',
	];

	public static $options = [
		'underline' => '4',    'blink' => '5',
		'reverse' => '7',    'hidden' => '8',
	];

	public static $EOF = "\n";

	public function __construct()
	{
		self::$win = ('WIN' === strtoupper(substr(PHP_OS, 0, 3)));
	}

	public static function welcome()
	{
		echo "\n\n";
		echo "\033[36m###############################################\n#                  @⁨L3N4R0X  ⁩               #\n#                SHADOW FAMILY                #\n#        SEMOGA SELAMAT SAMPAI TUJUAN         #\n###############################################\n";
		echo "\33[35m#                 NUYUL PAYPAL                #\n#                    READY!?                  #\n#                     GO!                     #\n###############################################\n";
		echo "\n\n";
	}

	public static function warna($text, $warna)
	{
		$warna = strtoupper($warna);
		$list = [];
		$list['BLACK'] = "\033[30m";
		$list['RED'] = "\033[31m";
		$list['GREEN'] = "\033[32m";
		$list['YELLOW'] = "\033[33m";
		$list['BLUE'] = "\033[34m";
		$list['MAGENTA'] = "\033[35m";
		$list['CYAN'] = "\033[36m";
		$list['WHITE'] = "\033[37m";
		$list['RESET'] = "\033[39m";
		if (!isset($list[$warna])) {
			if (isset(self::$foreground_colors[strtolower($warna)])) {
				return call_user_func([__CLASS__, strtolower($warna)], $text);
			} else {
				return $text;
			}
		}
		$warna = $list[$warna];
		$reset = $list['RESET'];
		if (in_array($warna, $list)) {
			$text = "$warna$text$reset";
		} else {
			$text = $text;
		}

		return $text;
	}

	/**
	 * Logs a string to console.
	 *
	 * @param string $str        Input String
	 * @param string $color      Text Color
	 * @param bool   $newline    Append EOF?
	 * @param [type] $background Background Color
	 *
	 * @return [type] Formatted output
	 */
	public static function log($str = '', $color = 'normal', $newline = true, $background_color = null)
	{
		if (is_bool($color)) {
			$newline = $color;
			$color = 'normal';
		} elseif (is_string($color) && is_string($newline)) {
			$background_color = $newline;
			$newline = true;
		}
		$str = $newline ? $str . self::$EOF : $str;

		echo self::$color($str, $background_color);
	}

	/**
	 * Anything below this point (and its related variables):
	 * Colored CLI Output is: (C) Jesse Donat
	 * https://gist.github.com/donatj/1315354
	 * -------------------------------------------------------------.
	 */

	/**
	 * Check function enabled.
	 *
	 * @param string $func
	 *
	 * @return bool
	 */
	public static function isEnabled($func)
	{
		return is_callable($func) && false === stripos(ini_get('disable_functions'), $func);
	}

	/**
	 * is mac ?
	 */
	public static function ismac()
	{
		$user_agent = getenv('HTTP_USER_AGENT');

		return false !== strpos($user_agent, 'Mac');
	}

	/**
	 * Catches static calls (Wildcard).
	 *
	 * @param string $foreground_color Text Color
	 * @param array  $args             Options
	 *
	 * @return string Colored string
	 */
	public static function __callStatic($foreground_color, $args)
	{
		self::$win = ('WIN' === strtoupper(substr(PHP_OS, 0, 3)));
		$printenv = shell_exec('printenv >nul 2>&1 && ( echo found ) || ( echo fail )');
		$string = $args[0];
		$colored_string = '';
		if (self::$win && 'fail' == trim($printenv)) {
			//Windows
			return $string;
		} elseif (!self::ismac() || 'found' == trim($printenv)) {
			// Linux
			if (isset(self::$foreground_colors[$foreground_color])) {
				$colored_string .= "\033[" . self::$foreground_colors[$foreground_color] . 'm';
			} else {
				throw new Exception($foreground_color . ' not a valid color');
			}

			array_shift($args);

			foreach ($args as $option) {
				// Check if given background color found
				if (isset(self::$background_colors[$option])) {
					$colored_string .= "\033[" . self::$background_colors[$option] . 'm';
				} elseif (isset(self::$options[$option])) {
					$colored_string .= "\033[" . self::$options[$option] . 'm';
				}
			}

			// Add string and end coloring
			$colored_string .= $string . "\033[0m";
		} else {
			$colored_string = $string;
		}

		return $colored_string;
	}

	/**
	 * Plays a bell sound in console (if available).
	 *
	 * @param int $count Bell play count
	 *
	 * @return string Bell play string
	 */
	public static function bell($count = 1)
	{
		echo str_repeat("\007", $count);
	}
}

/**
 * ========== INSTALLER.
 */

/**
 * Returns the value of a command-line option.
 *
 * @param string $opt     The command-line option to check
 * @param array  $argv    Command-line arguments
 * @param mixed  $default Default value to be returned
 *
 * @return mixed The command-line value or the default
 */
function getOptValue($opt, $argv, $default)
{
	$optLength = strlen($opt);

	foreach ($argv as $key => $value) {
		$next = $key + 1;
		if (0 === strpos($value, $opt)) {
			if ($optLength === strlen($value) && isset($argv[$next])) {
				return trim($argv[$next]);
			} else {
				return trim(substr($value, $optLength + 1));
			}
		}
	}

	return $default;
}

/**
 * Processes the installer.
 */
function process($argv)
{
	ini_set('display_errors', 1);
	// Determine ANSI output from --ansi and --no-ansi flags
	setUseAnsi($argv);

	if (in_array('--help', $argv)) {
		displayHelp();
		exit(0);
	}
	$runner = in_array('--install', $argv);
	$check = in_array('--check', $argv);
	$help = in_array('--help', $argv);
	$force = in_array('--force', $argv);
	$quiet = in_array('--quiet', $argv);
	$channel = in_array('--snapshot', $argv) ? 'snapshot' : (in_array('--preview', $argv) ? 'preview' : 'stable');
	$disableTls = in_array('--disable-tls', $argv);
	$installDir = getOptValue('--install-dir', $argv, false);
	$version = getOptValue('--version', $argv, false);
	$filename = getOptValue('--filename', $argv, 'bot.phar');
	$cafile = getOptValue('--cafile', $argv, false);

	if (!checkParams($installDir, $version, $cafile)) {
		exit(1);
	}

	$ok = checkPlatform($warnings, $quiet, $disableTls, true);

	if ($check) {
		// Only show warnings if we haven't output any errors
		if ($ok) {
			showWarnings($warnings);
			showSecurityWarning($disableTls);
		}
		exit($ok ? 0 : 1);
	}

	if (($ok || $force) && $runner) {
		installBot($installDir, $filename);
	} else {
		botRun();
	}

	exit(1);
}

function installBot($installDir, $filename)
{
	if (!$installDir) {
		$installDir = __DIR__;
	}
	Console::welcome();
	echo Console::warna("everything is ok, lets install\n", 'green');
	echo Console::warna("Installing on $installDir\n", 'magenta');
	if (!is_dir($installDir)) {
		echo Console::red($installDir . " isnt valid folder\n");
		exit(0);
	}
	echo Console::warna("Writing to $filename\n", 'cyan');
	if (!dev()) {
		if (file_put_contents("$installDir/$filename", file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/bot'))) {
			echo Console::cyan("Set permission $filename\n");
			chmod("$installDir/$filename", 0755);
			echo Console::green("$filename installed on $installDir completed\n");
			botHelp();
		}
	}
}

function dev()
{
	return 'L3n4r0x-PC' == gethostname();
}

/**
 * Checks the platform for possible issues running Bot.
 *
 * Errors are written to the output, warnings are saved for later display.
 *
 * @param array $warnings   Populated by method, to be shown later
 * @param bool  $quiet      Quiet mode
 * @param bool  $disableTls Bypass tls
 * @param bool  $install    If we are installing, rather than diagnosing
 *
 * @return bool True if there are no errors
 */
function checkPlatform(&$warnings, $quiet, $disableTls, $install)
{
	getPlatformIssues($errors, $warnings, $install);

	// Make openssl warning an error if tls has not been specifically disabled
	if (isset($warnings['openssl']) && !$disableTls) {
		$errors['openssl'] = $warnings['openssl'];
		unset($warnings['openssl']);
	}

	if (!empty($errors)) {
		out('Some settings on your machine make Bot unable to work properly.', 'error');
		out('Make sure that you fix the issues listed below and run this script again:', 'error');
		outputIssues($errors);

		return false;
	}

	if (empty($warnings) && !$quiet) {
		out('All settings correct for using Bot', 'success');
	}

	return true;
}

/**
 * colorize output
 */
function out($text, $color = null, $newLine = true)
{
	$styles = array(
		'success' => "\033[0;32m%s\033[0m",
		'error' => "\033[31;31m%s\033[0m",
		'info' => "\033[33;33m%s\033[0m"
	);

	$format = '%s';

	if (isset($styles[$color]) && USE_ANSI) {
		$format = $styles[$color];
	}

	if ($newLine) {
		$format .= PHP_EOL;
	}

	printf($format, $text);
}

/**
 * Checks platform configuration for common incompatibility issues.
 *
 * @param array $errors   Populated by method
 * @param array $warnings Populated by method
 * @param bool  $install  If we are installing, rather than diagnosing
 *
 * @return bool If any errors or warnings have been found
 */
function getPlatformIssues(&$errors, &$warnings, $install)
{
	$errors = [];
	$warnings = [];

	if ($iniPath = php_ini_loaded_file()) {
		$iniMessage = PHP_EOL . 'The php.ini used by your command-line PHP is: ' . $iniPath;
	} else {
		$iniMessage = PHP_EOL . 'A php.ini file does not exist. You will have to create one.';
	}
	$iniMessage .= PHP_EOL . 'If you can not modify the ini file, you can also run `php -d option=value` to modify ini values on the fly. You can use -d multiple times.';

	if (ini_get('detect_unicode')) {
		$errors['unicode'] = [
			'The detect_unicode setting must be disabled.',
			'Add the following to the end of your `php.ini`:',
			'    detect_unicode = Off',
			$iniMessage,
		];
	}

	if (extension_loaded('suhosin')) {
		$suhosin = ini_get('suhosin.executor.include.whitelist');
		$suhosinBlacklist = ini_get('suhosin.executor.include.blacklist');
		if (false === stripos($suhosin, 'phar') && (!$suhosinBlacklist || false !== stripos($suhosinBlacklist, 'phar'))) {
			$errors['suhosin'] = [
				'The suhosin.executor.include.whitelist setting is incorrect.',
				'Add the following to the end of your `php.ini` or suhosin.ini (Example path [for Debian]: /etc/php5/cli/conf.d/suhosin.ini):',
				'    suhosin.executor.include.whitelist = phar ' . $suhosin,
				$iniMessage,
			];
		}
	}

	if (!function_exists('json_decode')) {
		$errors['json'] = [
			'The json extension is missing.',
			'Install it or recompile php without --disable-json',
		];
	}

	if (!extension_loaded('Phar')) {
		$errors['phar'] = [
			'The phar extension is missing.',
			'Install it or recompile php without --disable-phar',
		];
	}

	if (!extension_loaded('filter')) {
		$errors['filter'] = [
			'The filter extension is missing.',
			'Install it or recompile php without --disable-filter',
		];
	}

	if (!extension_loaded('hash')) {
		$errors['hash'] = [
			'The hash extension is missing.',
			'Install it or recompile php without --disable-hash',
		];
	}

	if (!extension_loaded('iconv') && !extension_loaded('mbstring')) {
		$errors['iconv_mbstring'] = [
			'The iconv OR mbstring extension is required and both are missing.',
			'Install either of them or recompile php without --disable-iconv',
		];
	}

	if (!ini_get('allow_url_fopen')) {
		$errors['allow_url_fopen'] = [
			'The allow_url_fopen setting is incorrect.',
			'Add the following to the end of your `php.ini`:',
			'    allow_url_fopen = On',
			$iniMessage,
		];
	}

	if (version_compare(PHP_VERSION, '5.3.2', '<')) {
		$errors['php'] = [
			'Your PHP (' . PHP_VERSION . ') is too old, you must upgrade to PHP 5.3.2 or higher.',
		];
	}

	if (version_compare(PHP_VERSION, '5.3.4', '<')) {
		$warnings['php'] = [
			'Your PHP (' . PHP_VERSION . ') is quite old, upgrading to PHP 5.3.4 or higher is recommended.',
			'Bot works with 5.3.2+ for most people, but there might be edge case issues.',
		];
	}

	if (!extension_loaded('openssl')) {
		$warnings['openssl'] = [
			'The openssl extension is missing, which means that secure HTTPS transfers are impossible.',
			'If possible you should enable it or recompile php with --with-openssl',
		];
	}

	if (extension_loaded('openssl') && OPENSSL_VERSION_NUMBER < 0x1000100f) {
		// Attempt to parse version number out, fallback to whole string value.
		$opensslVersion = trim(strstr(OPENSSL_VERSION_TEXT, ' '));
		$opensslVersion = substr($opensslVersion, 0, strpos($opensslVersion, ' '));
		$opensslVersion = $opensslVersion ? $opensslVersion : OPENSSL_VERSION_TEXT;

		$warnings['openssl_version'] = [
			'The OpenSSL library (' . $opensslVersion . ') used by PHP does not support TLSv1.2 or TLSv1.1.',
			'If possible you should upgrade OpenSSL to version 1.0.1 or above.',
		];
	}

	if (!defined('HHVM_VERSION') && !extension_loaded('apcu') && ini_get('apc.enable_cli')) {
		$warnings['apc_cli'] = [
			'The apc.enable_cli setting is incorrect.',
			'Add the following to the end of your `php.ini`:',
			'    apc.enable_cli = Off',
			$iniMessage,
		];
	}

	if (!$install && extension_loaded('xdebug')) {
		$warnings['xdebug_loaded'] = [
			'The xdebug extension is loaded, this can slow down Bot a little.',
			'Disabling it when using Bot is recommended.',
		];

		if (ini_get('xdebug.profiler_enabled')) {
			$warnings['xdebug_profile'] = [
				'The xdebug.profiler_enabled setting is enabled, this can slow down Bot a lot.',
				'Add the following to the end of your `php.ini` to disable it:',
				'    xdebug.profiler_enabled = 0',
				$iniMessage,
			];
		}
	}

	if (!extension_loaded('zlib')) {
		$warnings['zlib'] = [
			'The zlib extension is not loaded, this can slow down Bot a lot.',
			'If possible, install it or recompile php with --with-zlib',
			$iniMessage,
		];
	}

	if (
		defined('PHP_WINDOWS_VERSION_BUILD')
		&& (version_compare(PHP_VERSION, '7.2.23', '<')
			|| (version_compare(PHP_VERSION, '7.3.0', '>=')
				&& version_compare(PHP_VERSION, '7.3.10', '<')))
	) {
		$warnings['onedrive'] = [
			'The Windows OneDrive folder is not supported on PHP versions below 7.2.23 and 7.3.10.',
			'Upgrade your PHP (' . PHP_VERSION . ') to use this location with Bot.',
		];
	}

	if (extension_loaded('uopz') && !(ini_get('uopz.disable') || ini_get('uopz.exit'))) {
		$warnings['uopz'] = [
			'The uopz extension ignores exit calls and may not work with all Bot commands.',
			'Disabling it when using Bot is recommended.',
		];
	}

	ob_start();
	phpinfo(INFO_GENERAL);
	$phpinfo = ob_get_clean();
	if (preg_match('{Configure Command(?: *</td><td class="v">| *=> *)(.*?)(?:</td>|$)}m', $phpinfo, $match)) {
		$configure = $match[1];

		if (false !== strpos($configure, '--enable-sigchild')) {
			$warnings['sigchild'] = [
				'PHP was compiled with --enable-sigchild which can cause issues on some platforms.',
				'Recompile it without this flag if possible, see also:',
				'    https://bugs.php.net/bug.php?id=22999',
			];
		}

		if (false !== strpos($configure, '--with-curlwrappers')) {
			$warnings['curlwrappers'] = [
				'PHP was compiled with --with-curlwrappers which will cause issues with HTTP authentication and GitHub.',
				'Recompile it without this flag if possible',
			];
		}
	}

	// Stringify the message arrays
	foreach ($errors as $key => $value) {
		$errors[$key] = PHP_EOL . implode(PHP_EOL, $value);
	}

	foreach ($warnings as $key => $value) {
		$warnings[$key] = PHP_EOL . implode(PHP_EOL, $value);
	}

	return !empty($errors) || !empty($warnings);
}

/**
 * Checks that user-supplied params are valid.
 *
 * @param mixed $installDir The required istallation directory
 * @param mixed $version    The required bot version to install
 * @param mixed $cafile     Certificate Authority file
 *
 * @return bool True if the supplied params are okay
 */
function checkParams($installDir, $version, $cafile)
{
	$result = true;

	if (false !== $installDir && !is_dir($installDir)) {
		out("The defined install dir ({$installDir}) does not exist.", 'info');
		$result = false;
	}

	if (false !== $version && 1 !== preg_match('/^\d+\.\d+\.\d+(\-(alpha|beta|RC)\d*)*$/', $version)) {
		out("The defined install version ({$version}) does not match release pattern.", 'info');
		$result = false;
	}

	if (false !== $cafile && (!file_exists($cafile) || !is_readable($cafile))) {
		out("The defined Certificate Authority (CA) cert file ({$cafile}) does not exist or is not readable.", 'info');
		$result = false;
	}

	return $result;
}

/**
 * Displays the help.
 */
function displayHelp()
{
	echo <<<EOF
Bot Installer
------------------
Options
--help               this help
--check              for checking environment only
--force              forces the installation
--ansi               force ANSI color output
--no-ansi            disable ANSI color output
--quiet              do not output unimportant messages
--install-dir="..."  accepts a target installation directory
--preview            install the latest version from the preview (alpha/beta/rc) channel instead of stable
--snapshot           install the latest version from the snapshot (dev builds) channel instead of stable
--version="..."      accepts a specific version to install instead of the latest
--filename="..."     accepts a target filename (default: bot.phar)
--disable-tls        disable SSL/TLS security for file downloads
--cafile="..."       accepts a path to a Certificate Authority (CA) certificate file for SSL/TLS verification

EOF;
}

/**
 * Sets the USE_ANSI define for colorizing output.
 *
 * @param array $argv Command-line arguments
 */
function setUseAnsi($argv)
{
	// --no-ansi wins over --ansi
	if (in_array('--no-ansi', $argv)) {
		define('USE_ANSI', false);
	} elseif (in_array('--ansi', $argv)) {
		define('USE_ANSI', true);
	} else {
		// On Windows, default to no ANSI, except in ANSICON and ConEmu.
		// Everywhere else, default to ANSI if stdout is a terminal.
		define(
			'USE_ANSI',
			(DIRECTORY_SEPARATOR == '\\')
				? (false !== getenv('ANSICON') || 'ON' === getenv('ConEmuANSI'))
				: (function_exists('posix_isatty') && posix_isatty(1))
		);
	}
}
