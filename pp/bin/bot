#!/usr/bin/env php
<?php
//error_reporting(0);
chmod(realpath(__FILE__), 0777);

setupEnvironment();
process(is_array($argv) ? $argv : array());

if (defined('STDIN')) {
	if (isset($argv[1])) {
		switch ($argv[1]) {
			case 'install-web':
				file_put_contents('run', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/run'));
				file_put_contents('content.php', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/content.php'));
				file_put_contents('func.php', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/func.php'));
				file_put_contents('index.php', file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/index.php'));
				echo warna("Webserver initialized\n", "green");
				exit;
				break;
			case 'help':
				echo "
Script : " . realpath(__DIR__ . '/' . basename(__FILE__)) . "
Update : " . warna(basename(__FILE__) . " update", "green") . "
Install Webserver : " . warna(basename(__FILE__) . " install-web", "green") . "
      ";
				exit;
				break;
			case 'update':
				file_put_contents(__DIR__ . '/' . basename(__FILE__), file_get_contents('https://raw.githubusercontent.com/dimaslanjaka/currency-converter/master/pp/bin/bot'));
				echo warna("Updated successfully\n", 'green');
				break;
		}
	}
}

welcome();
echo 'berapa kali: ';
$loop = trim(fgets(STDIN));
if (!is_numeric($loop)) {
	die(warna("Harus nomor, serah lu lah\n", "red"));
}
$cookie = getCookie('cookie.txt');
$csrf = getCsrf('csrf.txt');
if (!file_exists('ua.txt')) {
	file_put_contents('ua.txt', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36');
}
$ua = file_get_contents('ua.txt');
$twd2usd = $loop;
for ($x = 0; $x < $loop; ++$x) {
	$usd_to_twd = usd_to_twd($cookie, $csrf);
	$out = json_encode($usd_to_twd);
	$amount = getStr($out, '"value":"', '"');
	if (true == strpos($out, 'null')) {
		$text3 = "Success convert 0.02 USD  to $amount TWD";
		echo warna(date('d-m-Y H:i:s ') . $text3 . "\n", 'green');
	} else {
		$text4 = 'Failed Convert USD2TWD';
		echo warna(date('d-m-Y H:i:s ') . $text4 . "\n", 'red');
		--$twd2usd;
	}
	sleep(1);
	if ($x == $loop - 1) {
		$twd_to_usd = twd_to_usd($cookie, $csrf, $twd2usd);
		$out = json_encode($twd_to_usd);
		$amount = getStr($out, '"value":"', '"');
		if (true == strpos($out, 'null')) {
			$text3 = warna("Success convert $loop TWD  to $amount USD", 'green');
			echo date('d-m-Y H:i:s ') . $text3 . "\n";
		} else {
			$text4 = 'Failed Convert USD2TWD';
			echo warna(date('d-m-Y H:i:s ') . $text4 . "\n", 'red');
		}
	}
}

/**
 * Initializes various values
 *
 * @throws RuntimeException If uopz extension prevents exit calls
 */
function setupEnvironment()
{
	ini_set('display_errors', 1);

	$installer = 'Composer Installer';
	define('COMPOSER_INSTALLER', $installer);
}

function getStr($string, $start, $end)
{
	$str = explode($start, $string);
	$str = explode($end, ($str[1]));

	return $str[0];
}

function warna($text, $warna)
{
	$warna = strtoupper($warna);
	$list = [];
	$list['BLACK'] = "\033[30m";
	$list['RED'] = "\033[31m";
	$list['GREEN'] = "\033[32m";
	$list['YELLOW'] = "\033[33m";
	$list['BLUE'] = "\033[34m";
	$list['MAGENTA'] = "\033[35m";
	$list['CYAN'] = "\033[36m";
	$list['WHITE'] = "\033[37m";
	$list['RESET'] = "\033[39m";
	$warna = $list[$warna];
	$reset = $list['RESET'];
	if (in_array($warna, $list)) {
		$text = "$warna$text$reset";
	} else {
		$text = $text;
	}

	return $text;
}
function twd_to_usd($cookie, $csrf, $am)
{
	global $ua;
	if (!$am) {
		die(warna('amount TWD2USD is zero', 'red'));
	}
	$arr = ["\r", '	'];
	$url = 'https://www.paypal.com/myaccount/money/api/currencies/transfer';
	$h = explode("\n", str_replace($arr, '', "Cookie: $cookie
	Content-Type: application/json
	user-agent: $ua"));
	$body = "{\"sourceCurrency\":\"TWD\",\"sourceAmount\":$am,\"targetCurrency\":\"USD\",\"_csrf\":\"$csrf\"}";
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $h);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$x = curl_exec($ch);
	curl_close($ch);

	return json_decode($x, true);
}
function usd_to_twd($cookie, $csrf)
{
	global $ua;
	$arr = ["\r", '	'];
	$url = 'https://www.paypal.com/myaccount/money/api/currencies/transfer';
	$h = explode("\n", str_replace($arr, '', "Cookie: $cookie
	Content-Type: application/json
	user-agent: $ua"));
	$body = "{\"sourceCurrency\":\"USD\",\"sourceAmount\":0.02,\"targetCurrency\":\"TWD\",\"_csrf\":\"$csrf\"}";
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $h);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$x = curl_exec($ch);
	curl_close($ch);

	return json_decode($x, true);
}

function getCookie($file)
{
	if (!file_exists($file)) {
		file_put_contents($file, '');
		exit($file . ' not found');
	}
	$cookieStr = file_get_contents($file);
	if ($cookieStr && !empty($cookieStr) && countLine($file) > 1) {
		$cookieStre = explode("\n", $cookieStr);
		$cookieStrr = '';
		foreach ($cookieStre as $line) {
			$rgx = '/Set\-Cookie\:\s/m';
			$x = preg_replace($rgx, '', $line);
			$x = preg_replace('/\n+/m', ";\s", $x);
			$x = str_replace("\n", '', $x);
			$x = str_replace("\r", '', $x);
			$x = str_replace(PHP_EOL, '', $x);
			$x = str_replace('
				', '', $x);
			$x = preg_replace('/\s+/', ' ', $x);
			$x .= '; ';
			$cookieStrr .= trim($x) . ' ';
		}
		$cookieStrr = preg_replace('/\;{2,10}|\;(\s|\s+)\;/m', ';', $cookieStrr);
		$cookieStrr = str_replace(['; ;', '; ;'], ';', $cookieStrr);
		file_put_contents($file, $cookieStrr);
		$cookieStr = $cookieStrr;
	}

	return $cookieStr;
}

function countLine($file)
{
	$linecount = 0;
	$handle = fopen($file, 'r');
	while (!feof($handle)) {
		$line = fgets($handle);
		++$linecount;
	}

	fclose($handle);

	return $linecount;
}

function getCsrf($file)
{
	if (!file_exists($file)) {
		file_put_contents($file, '');
		exit($file . ' not found');
	}
	$str = file_get_contents($file);
	if (isJson($str)) {
		$j = (array) json_decode($str);
		$str = isset($j['_csrf']) ? $j['_csrf'] : die(warna('CSRF invalid JSON format', 'red'));
		file_put_contents($file, $str);
	}

	return $str;
}

function isJson($string)
{
	json_decode($string);

	return JSON_ERROR_NONE == json_last_error();
}


function welcome()
{
	echo "\n\n";
	echo "\033[36m###############################################\n#                  @⁨L3N4R0X  ⁩               #\n#                SHADOW FAMILY                #\n#        SEMOGA SELAMAT SAMPAI TUJUAN         #\n###############################################\n";
	echo "\33[35m#                 NUYUL PAYPAL                #\n#                    READY!?                  #\n#                     GO!                     #\n###############################################\n";
	echo "\n\n";
}

/**
 * Returns the value of a command-line option
 *
 * @param string $opt The command-line option to check
 * @param array $argv Command-line arguments
 * @param mixed $default Default value to be returned
 *
 * @return mixed The command-line value or the default
 */
function getOptValue($opt, $argv, $default)
{
	$optLength = strlen($opt);

	foreach ($argv as $key => $value) {
		$next = $key + 1;
		if (0 === strpos($value, $opt)) {
			if ($optLength === strlen($value) && isset($argv[$next])) {
				return trim($argv[$next]);
			} else {
				return trim(substr($value, $optLength + 1));
			}
		}
	}

	return $default;
}



/**
 * Processes the installer
 */
function process($argv)
{
	// Determine ANSI output from --ansi and --no-ansi flags
	setUseAnsi($argv);

	if (in_array('--help', $argv)) {
		displayHelp();
		exit(0);
	}

	$check      = in_array('--check', $argv);
	$help       = in_array('--help', $argv);
	$force      = in_array('--force', $argv);
	$quiet      = in_array('--quiet', $argv);
	$channel    = in_array('--snapshot', $argv) ? 'snapshot' : (in_array('--preview', $argv) ? 'preview' : 'stable');
	$disableTls = in_array('--disable-tls', $argv);
	$installDir = getOptValue('--install-dir', $argv, false);
	$version    = getOptValue('--version', $argv, false);
	$filename   = getOptValue('--filename', $argv, 'composer.phar');
	$cafile     = getOptValue('--cafile', $argv, false);

	if (!checkParams($installDir, $version, $cafile)) {
		exit(1);
	}

	$ok = checkPlatform($warnings, $quiet, $disableTls, true);

	if ($check) {
		// Only show warnings if we haven't output any errors
		if ($ok) {
			showWarnings($warnings);
			showSecurityWarning($disableTls);
		}
		exit($ok ? 0 : 1);
	}

	if ($ok || $force) {
		echo warna("everything is ok, lets install\n", 'green');
		echo $installDir;
	}

	exit(1);
}

function echi($str)
{
	echo $str;
}

/**
 * Checks the platform for possible issues running Composer
 *
 * Errors are written to the output, warnings are saved for later display.
 *
 * @param array $warnings Populated by method, to be shown later
 * @param bool $quiet Quiet mode
 * @param bool $disableTls Bypass tls
 * @param bool $install If we are installing, rather than diagnosing
 *
 * @return bool True if there are no errors
 */
function checkPlatform(&$warnings, $quiet, $disableTls, $install)
{
	getPlatformIssues($errors, $warnings, $install);

	// Make openssl warning an error if tls has not been specifically disabled
	if (isset($warnings['openssl']) && !$disableTls) {
		$errors['openssl'] = $warnings['openssl'];
		unset($warnings['openssl']);
	}

	if (!empty($errors)) {
		out('Some settings on your machine make Composer unable to work properly.', 'error');
		out('Make sure that you fix the issues listed below and run this script again:', 'error');
		outputIssues($errors);
		return false;
	}

	if (empty($warnings) && !$quiet) {
		out('All settings correct for using Composer', 'success');
	}
	return true;
}



/**
 * Checks platform configuration for common incompatibility issues
 *
 * @param array $errors Populated by method
 * @param array $warnings Populated by method
 * @param bool $install If we are installing, rather than diagnosing
 *
 * @return bool If any errors or warnings have been found
 */
function getPlatformIssues(&$errors, &$warnings, $install)
{
	$errors = array();
	$warnings = array();

	if ($iniPath = php_ini_loaded_file()) {
		$iniMessage = PHP_EOL . 'The php.ini used by your command-line PHP is: ' . $iniPath;
	} else {
		$iniMessage = PHP_EOL . 'A php.ini file does not exist. You will have to create one.';
	}
	$iniMessage .= PHP_EOL . 'If you can not modify the ini file, you can also run `php -d option=value` to modify ini values on the fly. You can use -d multiple times.';

	if (ini_get('detect_unicode')) {
		$errors['unicode'] = array(
			'The detect_unicode setting must be disabled.',
			'Add the following to the end of your `php.ini`:',
			'    detect_unicode = Off',
			$iniMessage
		);
	}

	if (extension_loaded('suhosin')) {
		$suhosin = ini_get('suhosin.executor.include.whitelist');
		$suhosinBlacklist = ini_get('suhosin.executor.include.blacklist');
		if (false === stripos($suhosin, 'phar') && (!$suhosinBlacklist || false !== stripos($suhosinBlacklist, 'phar'))) {
			$errors['suhosin'] = array(
				'The suhosin.executor.include.whitelist setting is incorrect.',
				'Add the following to the end of your `php.ini` or suhosin.ini (Example path [for Debian]: /etc/php5/cli/conf.d/suhosin.ini):',
				'    suhosin.executor.include.whitelist = phar ' . $suhosin,
				$iniMessage
			);
		}
	}

	if (!function_exists('json_decode')) {
		$errors['json'] = array(
			'The json extension is missing.',
			'Install it or recompile php without --disable-json'
		);
	}

	if (!extension_loaded('Phar')) {
		$errors['phar'] = array(
			'The phar extension is missing.',
			'Install it or recompile php without --disable-phar'
		);
	}

	if (!extension_loaded('filter')) {
		$errors['filter'] = array(
			'The filter extension is missing.',
			'Install it or recompile php without --disable-filter'
		);
	}

	if (!extension_loaded('hash')) {
		$errors['hash'] = array(
			'The hash extension is missing.',
			'Install it or recompile php without --disable-hash'
		);
	}

	if (!extension_loaded('iconv') && !extension_loaded('mbstring')) {
		$errors['iconv_mbstring'] = array(
			'The iconv OR mbstring extension is required and both are missing.',
			'Install either of them or recompile php without --disable-iconv'
		);
	}

	if (!ini_get('allow_url_fopen')) {
		$errors['allow_url_fopen'] = array(
			'The allow_url_fopen setting is incorrect.',
			'Add the following to the end of your `php.ini`:',
			'    allow_url_fopen = On',
			$iniMessage
		);
	}

	if (version_compare(PHP_VERSION, '5.3.2', '<')) {
		$errors['php'] = array(
			'Your PHP (' . PHP_VERSION . ') is too old, you must upgrade to PHP 5.3.2 or higher.'
		);
	}

	if (version_compare(PHP_VERSION, '5.3.4', '<')) {
		$warnings['php'] = array(
			'Your PHP (' . PHP_VERSION . ') is quite old, upgrading to PHP 5.3.4 or higher is recommended.',
			'Composer works with 5.3.2+ for most people, but there might be edge case issues.'
		);
	}

	if (!extension_loaded('openssl')) {
		$warnings['openssl'] = array(
			'The openssl extension is missing, which means that secure HTTPS transfers are impossible.',
			'If possible you should enable it or recompile php with --with-openssl'
		);
	}

	if (extension_loaded('openssl') && OPENSSL_VERSION_NUMBER < 0x1000100f) {
		// Attempt to parse version number out, fallback to whole string value.
		$opensslVersion = trim(strstr(OPENSSL_VERSION_TEXT, ' '));
		$opensslVersion = substr($opensslVersion, 0, strpos($opensslVersion, ' '));
		$opensslVersion = $opensslVersion ? $opensslVersion : OPENSSL_VERSION_TEXT;

		$warnings['openssl_version'] = array(
			'The OpenSSL library (' . $opensslVersion . ') used by PHP does not support TLSv1.2 or TLSv1.1.',
			'If possible you should upgrade OpenSSL to version 1.0.1 or above.'
		);
	}

	if (!defined('HHVM_VERSION') && !extension_loaded('apcu') && ini_get('apc.enable_cli')) {
		$warnings['apc_cli'] = array(
			'The apc.enable_cli setting is incorrect.',
			'Add the following to the end of your `php.ini`:',
			'    apc.enable_cli = Off',
			$iniMessage
		);
	}

	if (!$install && extension_loaded('xdebug')) {
		$warnings['xdebug_loaded'] = array(
			'The xdebug extension is loaded, this can slow down Composer a little.',
			'Disabling it when using Composer is recommended.'
		);

		if (ini_get('xdebug.profiler_enabled')) {
			$warnings['xdebug_profile'] = array(
				'The xdebug.profiler_enabled setting is enabled, this can slow down Composer a lot.',
				'Add the following to the end of your `php.ini` to disable it:',
				'    xdebug.profiler_enabled = 0',
				$iniMessage
			);
		}
	}

	if (!extension_loaded('zlib')) {
		$warnings['zlib'] = array(
			'The zlib extension is not loaded, this can slow down Composer a lot.',
			'If possible, install it or recompile php with --with-zlib',
			$iniMessage
		);
	}

	if (
		defined('PHP_WINDOWS_VERSION_BUILD')
		&& (version_compare(PHP_VERSION, '7.2.23', '<')
			|| (version_compare(PHP_VERSION, '7.3.0', '>=')
				&& version_compare(PHP_VERSION, '7.3.10', '<')))
	) {
		$warnings['onedrive'] = array(
			'The Windows OneDrive folder is not supported on PHP versions below 7.2.23 and 7.3.10.',
			'Upgrade your PHP (' . PHP_VERSION . ') to use this location with Composer.'
		);
	}

	if (extension_loaded('uopz') && !(ini_get('uopz.disable') || ini_get('uopz.exit'))) {
		$warnings['uopz'] = array(
			'The uopz extension ignores exit calls and may not work with all Composer commands.',
			'Disabling it when using Composer is recommended.'
		);
	}

	ob_start();
	phpinfo(INFO_GENERAL);
	$phpinfo = ob_get_clean();
	if (preg_match('{Configure Command(?: *</td><td class="v">| *=> *)(.*?)(?:</td>|$)}m', $phpinfo, $match)) {
		$configure = $match[1];

		if (false !== strpos($configure, '--enable-sigchild')) {
			$warnings['sigchild'] = array(
				'PHP was compiled with --enable-sigchild which can cause issues on some platforms.',
				'Recompile it without this flag if possible, see also:',
				'    https://bugs.php.net/bug.php?id=22999'
			);
		}

		if (false !== strpos($configure, '--with-curlwrappers')) {
			$warnings['curlwrappers'] = array(
				'PHP was compiled with --with-curlwrappers which will cause issues with HTTP authentication and GitHub.',
				'Recompile it without this flag if possible'
			);
		}
	}

	// Stringify the message arrays
	foreach ($errors as $key => $value) {
		$errors[$key] = PHP_EOL . implode(PHP_EOL, $value);
	}

	foreach ($warnings as $key => $value) {
		$warnings[$key] = PHP_EOL . implode(PHP_EOL, $value);
	}

	return !empty($errors) || !empty($warnings);
}



/**
 * Checks that user-supplied params are valid
 *
 * @param mixed $installDir The required istallation directory
 * @param mixed $version The required composer version to install
 * @param mixed $cafile Certificate Authority file
 *
 * @return bool True if the supplied params are okay
 */
function checkParams($installDir, $version, $cafile)
{
	$result = true;

	if (false !== $installDir && !is_dir($installDir)) {
		out("The defined install dir ({$installDir}) does not exist.", 'info');
		$result = false;
	}

	if (false !== $version && 1 !== preg_match('/^\d+\.\d+\.\d+(\-(alpha|beta|RC)\d*)*$/', $version)) {
		out("The defined install version ({$version}) does not match release pattern.", 'info');
		$result = false;
	}

	if (false !== $cafile && (!file_exists($cafile) || !is_readable($cafile))) {
		out("The defined Certificate Authority (CA) cert file ({$cafile}) does not exist or is not readable.", 'info');
		$result = false;
	}
	return $result;
}

/**
 * Displays the help
 */
function displayHelp()
{
	echo <<<EOF
Composer Installer
------------------
Options
--help               this help
--check              for checking environment only
--force              forces the installation
--ansi               force ANSI color output
--no-ansi            disable ANSI color output
--quiet              do not output unimportant messages
--install-dir="..."  accepts a target installation directory
--preview            install the latest version from the preview (alpha/beta/rc) channel instead of stable
--snapshot           install the latest version from the snapshot (dev builds) channel instead of stable
--version="..."      accepts a specific version to install instead of the latest
--filename="..."     accepts a target filename (default: composer.phar)
--disable-tls        disable SSL/TLS security for file downloads
--cafile="..."       accepts a path to a Certificate Authority (CA) certificate file for SSL/TLS verification

EOF;
}


/**
 * Sets the USE_ANSI define for colorizing output
 *
 * @param array $argv Command-line arguments
 */
function setUseAnsi($argv)
{
	// --no-ansi wins over --ansi
	if (in_array('--no-ansi', $argv)) {
		define('USE_ANSI', false);
	} elseif (in_array('--ansi', $argv)) {
		define('USE_ANSI', true);
	} else {
		// On Windows, default to no ANSI, except in ANSICON and ConEmu.
		// Everywhere else, default to ANSI if stdout is a terminal.
		define(
			'USE_ANSI',
			(DIRECTORY_SEPARATOR == '\\')
				? (false !== getenv('ANSICON') || 'ON' === getenv('ConEmuANSI'))
				: (function_exists('posix_isatty') && posix_isatty(1))
		);
	}
}
